export default function Loading() {
  return <h2>Loading...</h2>;
}

//페이지가 로딩된다.
//그리고 바로 UI도 확인 할 수 있다.

//서버에서 브라우저가 로딩중이지만 이전처럼 페이지가 비어있지 않는다.
//바로 볼 수 있는 UI가 생겼다.

//✅ 서버 컴포넌트에서 fetch하는 중에
//Loading파일을 생성(제공)해주기만 하면 로딩 페이지를 보여준다. 파일이름은 꼭 loading이여야 한다. 그리고 page 파일과 함께 있어야 한다!
//그리고 서버측에서 fetch를 끝내면 NextJs는 보여주었던 로딩 컴포넌트를 페이지 컴포넌트로 바꿔준다!!
//--> 사용자가 페이지에 도착하면 로딩 컴포넌트를 보여주고, 백엔드에서 data를 불러오는 함수의 fetch가 완료되면 백엔드가 브라우저에 완료된 결과값을 보낸다. 그 결과값이 보여줘야 렌더링 되어야 할 내용인 것.
//--> 웹사이트의 일부를 천천히 보낸다고 생각하면 된다. (아직 서버 데이터 안왔으니 일단 이거 먼저 보여줄게!)
//첫번째로 보내는 일부분은 layout이나 navigation 그 다음이 loading component

//그래서 page.tsx에서 HomePage 컴포넌트가 async여야 하는 이유는
//NextJs가 해당 컴포넌트에서 await해야 하기 때문!!
//await이 끝나면 브라우저에게 마지막 HTML부분을 전달해주는 것.
//사용자가 웹사이트에 도착하는 순간 로딩 상태를 주고, 준비가 된 HTML을 준다. (navigation, loading component와 같은..)

//--> loading component 보여주고, 그 동안 HomePage컴포넌트를 await 하고 보여줄 HTML 결과를 기다리고, 여기서 HTML이 반환되면
//그걸 브라우저에게 넘겨주고, 프론트 쪽에서 컴포넌트가 교체 되는 흐름!
//즉 프레임워크가 우리의 페이지를 작은 HTML로 나누고 준비된 부분을 하나씩 보여주는 것.

//--> 백엔드에서 데이터 fetch를 하면서 useState와 같은 건 사용 안해도 되고
//--> 그러면서 즉각적인 로딩 상태를 볼 수 있다. 사용자는 즉시 UI를 볼 수 있다.
